class PriorityQueueBase:

    class _Item:
        __slots__ = slots = "_key" , "_value"
        def __init__ (self, k, v):
            self._key = k
            self._value = v
        def __lt__(self, other):
            return self._key < other._key # compare items based on their keys

    def is_empty(self):
        return len(self) == 0

class HeapPriorityQueue(PriorityQueueBase):

    def _parent(self, j):
        return (j-1) // 2

    def _left(self, j):
        return 2*j + 1

    def right(self, j):
        return 2*j + 2

    def _has_left(self, j):
        return self._left(j) < len(self._data)

    def _has_right(self, j):
        return self.right(j) < len(self._data)

    def _swap(self, i, j):
        self._data[i], self._data[j] = self._data[j], self._data[i]

    def _upheap(self, j):
        parent = self._parent(j)
        if j > 0 and self._data[j] < self._data[parent]:
            self._swap(j, parent)
            self._upheap(parent)

    def _downheap(self, j):
        if self._has_left(j):
            left = self._left(j)
            small_child = left  # although right may be smaller
            if self._has_right(j):
                right = self.right(j)
                if self._data[right] < self._data[left]:
                    small_child = right
            if self._data[small_child] < self._data[j]:
                self._swap(j, small_child)
                self._downheap(small_child)

    def __init__(self):
        self._data = []

    def __len__(self):
        return len(self._data)

    def add(self, key, value):
        self._data.append(self._Item(key, value))
        self._upheap(len(self._data) - 1)

    def min(self):
        if self.is_empty():
            raise Exception("Priority queue is empty.")
        item = self._data[0]
        return (item._key, item._value)

    def remove_min(self):
        if self.is_empty():
            raise Exception("Priority queue is empty.")
        self._swap(0, len(self._data) - 1)
        item = self._data.pop()
        self._downheap(0)
        return (item._key, item._value)

import random
import time
import matplotlib.pyplot as plt
import pandas as pd

def test_heap(n):
    _heap=HeapPriorityQueue()
    measures=[]
    total=0
    for k in range(n):
        key=random.randint(0,n*(10**3))
        _heap.add(key,key)
    while not _heap.is_empty():
        start_time = time.time_ns()
        _heap.remove_min()
        end_time = time.time_ns()
        elapsed_time=end_time-start_time
        measures.append(elapsed_time)
        total+=elapsed_time
    avg=total/len(measures)
    mx=max(measures)
    return (avg,mx)

def report_results():
    results_list=[]
    for n in range(10000,1000001,10000):
        th_result=test_heap(n)
        results_list.append((n,th_result[0],th_result[1]))
    df=pd.DataFrame(results_list,columns=["n","avg","max"])
    plt.plot(df["n"],df["avg"])
    plt.plot(df["n"],df["max"])
    plt.show()

report_results()


-------------------------------------------------------------



def report_one_result():
    result_list=[]
    for n in range(1,4):
        th_result=test_heap(10**n)
        result_list.append((n,th_result[0],th_result[1]))
    df=pd.DataFrame(result_list, columns=["n", "avg", "max"])
    plt.plot(df["n"], df["avg"])
    plt.plot(df["n"], df["max"])
    plt.savefig("hw8_result_OnurYaman.pdf")
lst=[]
for i in range(1,7):
    lst.append((i,math.log2(10**i)))
df=pd.DataFrame(lst,columns=["x","log2(x)"])
plt.plot(df["x"],df["log2(x)"])
plt.show()
s=time.time_ns()
report_one_result()
e=time.time_ns()